version: '3'

services:
  postgres:
    container_name: postgres
    image: postgres
    # user: postgres
    environment:
      POSTGRES_USER: connect
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    networks:
      - postgres
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      start_period: 2m

  eureka-server:
    image: connectnavigation.azurecr.io/eureka-server
    container_name: eureka-server
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    healthcheck:
      test: ["CMD-SHELL", "exit", "0"]
      start_period: 2m

  features-microservice:
    image: connectnavigation.azurecr.io/features-microservice
    container_name: features-mircoservice
    build:
      context: ./features-microservice
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
      - postgres
    depends_on:
      postgres:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    restart: on-failure

  routes-microservice:
    image: connectnavigation.azurecr.io/routes-microservice
    container_name: routes-microservice
    build:
      context: ./routes-microservice
      dockerfile: Dockerfile
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      eureka-server:
        condition: service_healthy
    restart: on-failure

  api-gateway:
    image: connectnavigation.azurecr.io/api-gateway
    container_name: api-gateway
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    ports:
      - "80:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      eureka-server:
        condition: service_healthy
    restart: on-failure


networks:
  postgres:
    driver: bridge
  spring:
    driver: bridge

volumes:
  postgres:
